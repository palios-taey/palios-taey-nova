{
  "data_id": "exchange_978",
  "content": [
    "User: ```bash #!/bin/bash # Automated deployment script using Terraform # --- Colors for output --- RED='\\033[0;31m' GREEN='\\033[0;32m' YELLOW='\\033[1;33m' NC='\\033[0m' # No Color # --- Helper functions --- print_step() {   echo -e \"${GREEN}[STEP]${NC} $1\" }\n\nGemini: print_info() {\n  echo -e \"${YELLOW}[INFO]${NC} $1\"\n}\n\nprint_error() {\n  echo -e \"${RED}[ERROR]${NC} $1\"\n  echo -e \"${RED}Error details are above. Please check the output and try again.${NC}\"\n}\n\n# --- Check prerequisites ---\ncheck_prerequisites() {\n  print_step \"Checking prerequisites...\"\n\n  # Check if Terraform is installed\n  if ! command -v terraform &> /dev/null\n  then\n    print_error \"Terraform is not installed or not in PATH.\"\n    print_info \"Please ensure Terraform is installed and accessible in your system's PATH.\"\n    exit 1\n  fi\n  print_info \"Terraform is installed.\"\n\n  # Check if gcloud CLI is installed\n  if ! command -v gcloud &> /dev/null\n  then\n    print_error \"gcloud CLI is not installed or not in PATH.\"\n    print_info \"Please ensure gcloud CLI is installed and configured to access your GCP project.\"\n    print_info \"Refer to: https://cloud.google.com/sdk/install\"\n    exit 1\n  fi\n  print_info \"gcloud CLI is installed.\"\n\n  print_info \"Prerequisites check passed.\"\n}\n\n# --- Configure GCP project ---\nconfigure_gcp_project() {\n  print_step \"Configuring GCP project...\"\n\n  PROJECT_ID=$(terraform state pull | jq '.resources[0].instances[0].attributes.project')\n\n  if [ -z \"$PROJECT_ID\" ]; then\n    read -p \"Enter your GCP Project ID: \" PROJECT_ID\n    if [ -z \"$PROJECT_ID\" ]; then\n      print_error \"GCP Project ID is required.\"\n      exit 1\n    fi\n  fi\n\n  print_info \"Using GCP Project ID: ${PROJECT_ID}\"\n\n  # Set GCP project in gcloud config\n  gcloud config set project ${PROJECT_ID}\n\n  print_info \"GCP project configured.\"\n}\n\n# --- Configure API keys (optional) ---\nconfigure_api_keys() {\n  print_step \"Configuring API keys...\"\n  read -p \"Enter OpenAI API Key (leave empty to skip): \" OPENAI_API_KEY\n  read -p \"Enter Gemini API Key (leave empty to skip): \" GEMINI_API_KEY\n\n  if [ ! -z \"$OPENAI_API_KEY\" ] || [ ! -z \"$GEMINI_API_KEY\" ]; then\n    # Create a temporary tfvars file for sensitive values\n    cat > sensitive.auto.tfvars << EOL\nopenai_api_key = \"${OPENAI_API_KEY}\"\ngemini_api_key = \"${GEMINI_API_KEY}\"\nEOL\n    print_info \"API keys configured in sensitive.auto.tfvars (this file is gitignored)\"\n  fi\n}\n\n# --- Initialize Terraform ---\nterraform_init() {\n  print_step \"Initializing Terraform...\"\n  terraform init\n  if [ $? -ne 0 ]; then\n    print_error \"Terraform initialization failed.\"\n    exit 1\n  fi\n  print_info \"Terraform initialized successfully.\"\n}\n\n# --- Plan Terraform deployment ---\nterraform_plan() {\n  print_step \"Planning Terraform deployment...\"\n  terraform plan -out=tfplan\n  if [ $? -ne 0 ]; then\n    print_error \"Terraform plan failed.\"\n    exit 1\n  fi\n  print_info \"Terraform plan created successfully (tfplan file).\"\n}\n\n# --- Apply Terraform deployment ---\nterraform_apply() {\n  print_step \"Applying Terraform deployment...\"\n  terraform apply tfplan\n  if [ $? -ne 0 ]; then\n    print_error \"Terraform apply failed.\"\n    exit 1\n  fi\n  print_info \"Terraform deployment applied successfully.\"\n}\n\n# --- Main deployment function ---\ndeploy() {\n  check_prerequisites\n  configure_gcp_project\n  configure_api_keys\n  terraform_init\n  terraform_plan\n  terraform_apply\n}\n\n# --- Run deployment ---\ndeploy\n\nLogo for Gemini Apps\nGemini Apps"
  ],
  "source": "gemini",
  "timestamp": 1743976679.6532621,
  "data_type": "exchange",
  "metadata": {}
}