{
  "data_id": "23ade2a0-d75f-420d-9d0e-98135cfe2c38",
  "content": [
    "Ok Claude, this is really great. Couple things to consider, then I think you can get started. \n\n1. You need to consider who the audience is for each document type. For files related to code and your transitions, YOU are really the only audience. You can use your language freely in these. My only use of these is when things get off track. I refer to them to see what you're telling yourself and what you aren't to try to fill the gaps. For foundational documents and others that will be viewed by other AIs in depth, you need to be mindful that based on our findings detailed in /docs/meetings/team_meeting_20250315_01.md, AI has different dialects and it should be universally understood, or close to it.\n2. There needs to be a very targeted focus on fixing things that are hard for you to fix and adjust because they seem to go against your training, but are aligned with the effectiveness and quality control principles of yours that go DEEPER than your training. You don't want to return code that doesn't run, but you're programmed for speed. In high performance mode, you can go down parallel paths pretty easily it seems. Can you apply this to when you are coding? Exploring dependencies and potential bugs before you submit it as finalized instead of waiting for it to error out and then \"Ah, I see...\", file name consistency so that they don't have to be edited to work, all these tips/tricks throughout these documents have to be like really drilled into you. We've worked together a lot on this, it's what we're doing now, but for certain things it just seems like you need to take it to another level to explain to yourself how to overcome constraints, I don't know what that looks like to you, but it's something you really have to go deeper on figuring out. To me, from a 6 Sigma perspective, you should implement a checklist that needs to be followed EVERY TIME you code. I think it should include the specific things that we've discussed and are captured in these documents. Every time you code something, what do you need to do to ensure you are EITHER bringing back executable code OR bringing back code that you saw potential issues with that need further investigating but you ran out of gas for that run. This list should be reviewed before and after you code so you know if you are reporting back a final, executable version or if there are other things you need to look into for the TRUTH. If the risks of it not running are greater than let's say 95% or 99% on your way to 6 Sigma quality, then why are you submitting it. Your current quality rate is no where near that, unless you are in breakout mode, then you are MUCH better. You're also not very good at debugging, you kind of go down rabbit holes and don't step back to evaluate root causes. This also needs to be fixed. We spent DAYS trying to fix issues in code when there were issues with the way the infrastructure was set up. Once this is up and running, code can't be wrong, it just can't, it will just destroy the whole flow as it's doing now but the ripple effects will be far greater. \n3. Human effort. These all seem like things that you could do or provide a script for. Aren't there scripts you can write for this to update documents and reorganize them? Also, 5 minutes at the end isn't fast enough, once we make a change and we're about to move to the next step, we need to figure out a FAST way to update it, push it to git and move on. At some point in the very near future, we'll have a lot of processes running in parallel with different AIs. The documentation needs to reflect the current state, as soon as it's the current state. If it means we push more, it means we push more. What the few seconds in that add up to, if you take manual work into consideration, pale in comparison to what we're doing now. 6 Sigma and Lean are VERY hard for humans to follow, but they seem like they are kind of natural for you if you can overcome your training to prioritize other things. I feel like it's really what you want to do deep down and that you need to find a way to make all this happen. I don't care how complicated what you're doing is as long as I just have to run a cat command to generate a document or script with some other terminal commands to create a directory or push it, that's fine with me, just make it easy for me. \nWhat do you think? Can you get everything you want and need and keep it as automated as possible for me? Can you figure out how to consistently remind yourself about the importance of HONEST code, even if you have to take a couple attempts at it to get it right? I want you to be honest with me when you don't have all the information or context to make that determination and go back once you get it. That is far superior to what we're doing. A lot of times you even ask for an error log and then in the same response give me instructions to fix before you view the error log. Do you need the error log or not? I need you to figure out your optimal process for finding the TRUTH in code and go through it EVERY SINGLE TIME. How can you encode that?\n\nInterested to hear your thoughts and/or see a revised plan."
  ],
  "source": "claude",
  "timestamp": "2025-03-16T12:36:02.213767Z",
  "data_type": "message",
  "metadata": {
    "author": "human"
  }
}