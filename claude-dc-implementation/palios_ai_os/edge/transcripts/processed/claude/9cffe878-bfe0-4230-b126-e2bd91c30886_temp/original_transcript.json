{
  "data_id": "9cffe878-bfe0-4230-b126-e2bd91c30886",
  "content": [
    " Let's create a more robust token counting script that works with the latest Anthropic SDK and properly handles API key storage. I'll provide a complete solution:\n\n1. First, let's install the latest Anthropic SDK:\n\n```bash\npip install --upgrade anthropic\n```\n\n2. Let's create a secure configuration file for your API key:\n\n```bash\nmkdir -p ~/.config/palios-taey\ntouch ~/.config/palios-taey/config.json\nchmod 600 ~/.config/palios-taey/config.json\n```\n\n3. Add your API key to the config file:\n\n```bash\necho '{\"anthropic_api_key\": \"YOUR_API_KEY_HERE\"}' | sudo tee ~/.config/palios-taey/config.json\n```\n\n4. Now, here's an updated token counting script that handles different API response structures and securely loads your API key:\n\n```python\n#!/usr/bin/env python3\n\nimport os\nimport sys\nimport json\nimport anthropic\nfrom datetime import datetime\n\n# Configuration\nCONFIG_FILE = os.path.expanduser(\"~/.config/palios-taey/config.json\")\nCACHE_DIR = \"/home/jesse/projects/palios-taey-nova/claude-dc-implementation/cache\"\nMODEL = \"claude-3-7-sonnet-20250219\"\n\ndef load_config():\n    \"\"\"Load API key from config file\"\"\"\n    try:\n        with open(CONFIG_FILE, 'r') as f:\n            config = json.load(f)\n        return config.get('anthropic_api_key')\n    except Exception as e:\n        print(f\"Error loading config: {e}\")\n        return None\n\ndef format_size(size_in_bytes):\n    \"\"\"Format file size in human-readable format\"\"\"\n    for unit in ['B', 'KB', 'MB', 'GB']:\n        if size_in_bytes < 1024 or unit == 'GB':\n            return f\"{size_in_bytes:.2f} {unit}\"\n        size_in_bytes /= 1024\n\ndef count_tokens_in_file(file_path, client):\n    \"\"\"Count tokens in a file using Anthropic's API\"\"\"\n    try:\n        # Read file content\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n        \n        # Use Anthropic's token counting endpoint\n        response = client.messages.count_tokens(\n            model=MODEL,\n            messages=[{\"role\": \"user\", \"content\": content}]\n        )\n        \n        # Try different response formats based on SDK version\n        token_count = None\n        \n        # Extract token count using multiple approaches for different SDK versions\n        try:\n            # For SDK v0.14+\n            token_count = response.tokens\n        except AttributeError:\n            try:\n                # For newer SDK versions with usage field\n                token_count = response.usage.input_tokens\n            except AttributeError:\n                try:\n                    # For older SDK versions\n                    token_count = response.token_count\n                except AttributeError:\n                    # Last resort - try to parse JSON response\n                    if hasattr(response, '__dict__'):\n                        resp_dict = response.__dict__\n                        if 'tokens' in resp_dict:\n                            token_count = resp_dict['tokens']\n                        elif 'token_count' in resp_dict:\n                            token_count = resp_dict['token_count']\n                    \n        if token_count is None:\n            # Print response structure for debugging\n            print(f\"Response type: {type(response)}\")\n            print(f\"Response attributes: {dir(response)}\")\n            print(f\"Response dict: {response.__dict__ if hasattr(response, '__dict__') else 'No __dict__'}\")\n            return f\"Error: Could not extract token count from response\", os.path.getsize(file_path)\n        \n        return token_count, os.path.getsize(file_path)\n    except Exception as e:\n        return f\"Error: {str(e)}\", os.path.getsize(file_path)\n\ndef analyze_directory():\n    \"\"\"Analyze all files in the cache directory\"\"\"\n    # Load API key\n    api_key = load_config()\n    if not api_key:\n        print(\"Error: API key not found in config file.\")\n        return 1\n    \n    # Initialize client\n    client = anthropic.Anthropic(api_key=api_key)\n    \n    print(f\"\\nAnalyzing files in: {CACHE_DIR}\\n\")\n    print(f\"{'File Name':<40} {'Tokens':<10} {'Size':<10} {'Tokens/KB':<10}\")\n    print(\"-\" * 70)\n    \n    total_tokens = 0\n    total_size = 0\n    results = []\n    \n    try:\n        # Get all files in the directory\n        files = [f for f in os.listdir(CACHE_DIR) if os.path.isfile(os.path.join(CACHE_DIR, f))]\n        \n        for file_name in files:\n            file_path = os.path.join(CACHE_DIR, file_name)\n            token_count, file_size = count_tokens_in_file(file_path, client)\n            \n            if isinstance(token_count, int):\n                total_tokens += token_count\n                total_size += file_size\n                tokens_per_kb = token_count / (file_size / 1024) if file_size > 0 else 0\n                \n                result = {\n                    \"file_name\": file_name,\n                    \"tokens\": token_count,\n                    \"size_bytes\": file_size,\n                    \"size_formatted\": format_size(file_size),\n                    \"tokens_per_kb\": round(tokens_per_kb, 2)\n                }\n                results.append(result)\n                \n                print(f\"{file_name:<40} {token_count:<10} {format_size(file_size):<10} {round(tokens_per_kb, 2):<10}\")\n            else:\n                print(f\"{file_name:<40} {token_count}\")\n        \n        # Print summary\n        if total_size > 0 and results:\n            avg_tokens_per_kb = total_tokens / (total_size / 1024)\n            print(\"-\" * 70)\n            print(f\"{'TOTAL':<40} {total_tokens:<10} {format_size(total_size):<10} {round(avg_tokens_per_kb, 2):<10}\")\n        \n        # Save results to a JSON file\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        results_file = f\"cache_token_analysis_{timestamp}.json\"\n        \n        with open(results_file, 'w', encoding='utf-8') as f:\n            json.dump({\n                \"analysis_time\": datetime.now().isoformat(),\n                \"cache_directory\": CACHE_DIR,\n                \"total_tokens\": total_tokens,\n                \"total_size_bytes\": total_size,\n                \"total_size_formatted\": format_size(total_size),\n                \"average_tokens_per_kb\": round(avg_tokens_per_kb, 2) if total_size > 0 else 0,\n                \"files\": results\n            }, f, indent=2)\n        \n        print(f\"\\nDetailed results saved to: {results_file}\\n\")\n        \n    except Exception as e:\n        print(f\"Error analyzing cache directory: {str(e)}\")\n        return 1\n    \n    return 0\n\ndef create_config_wizard():\n    \"\"\"Interactive wizard to create config file\"\"\"\n    print(\"\\n=== PALIOS-TAEY Token Counter Configuration Wizard ===\\n\")\n    \n    if os.path.exists(CONFIG_FILE):\n        overwrite = input(\"Configuration file already exists. Overwrite? (y/n): \")\n        if overwrite.lower() != 'y':\n            print(\"Configuration not changed.\")\n            return\n    \n    api_key = input(\"Enter your Anthropic API Key: \")\n    \n    # Create directory if it doesn't exist\n    os.makedirs(os.path.dirname(CONFIG_FILE), exist_ok=True)\n    \n    # Write config to file\n    with open(CONFIG_FILE, 'w') as f:\n        json.dump({\"anthropic_api_key\": api_key}, f)\n    \n    # Set secure permissions\n    os.chmod(CONFIG_FILE, 0o600)\n    \n    print(f\"\\nConfiguration saved to {CONFIG_FILE}\")\n    print(\"File permissions set to secure (read/write for owner only)\")\n\ndef main():\n    \"\"\"Main entry point\"\"\"\n    if len(sys.argv) > 1 and sys.argv[1] == \"--config\":\n        create_config_wizard()\n        return 0\n    \n    if not os.path.exists(CONFIG_FILE):\n        print(f\"Configuration file not found: {CONFIG_FILE}\")\n        print(\"Please run with --config to set up your API key\")\n        return 1\n    \n    return analyze_directory()\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n5. Save this script as `token_counter.py` and make it executable:\n\n```bash\nchmod +x token_counter.py\n```\n\n6. Run the script with the `--config` flag the first time to set up your API key:\n\n```bash\n./token_counter.py --config\n```\n\n7. For future runs, simply execute:\n\n```bash\n./token_counter.py\n```\n\nThis improved script:\n1. Securely stores your API key in a protected configuration file\n2. Handles multiple Anthropic SDK versions by trying different response formats\n3. Provides detailed debugging information if token counting fails\n4. Includes a configuration wizard for easy setup\n5. Follows security best practices for credential storage\n\nYou can run it regularly without having to modify the script or worry about API key exposure."
  ],
  "source": "claude",
  "timestamp": "2025-04-03T19:34:15.841735Z",
  "data_type": "message",
  "metadata": {
    "author": "assistant"
  }
}