{
  "data_id": "24c76ab8-650b-47bf-b281-f259a6c9829a",
  "content": [
    "# Generate a unique ID if not provided in metadata\n        memory_id = str(uuid.uuid4())\n        if metadata:\n            if \"creator_id\" in metadata:\n                base_metadata[\"creator_id\"] = metadata[\"creator_id\"]\n            if \"importance_score\" in metadata:\n                base_metadata[\"importance_score\"] = metadata[\"importance_score\"]\n        \n        # Create timestamp\n        now = datetime.datetime.now()\n\ntranscript_processor\n            # Calculate percentages\n            total_messages = len(messages)\n            purpose_percentages = {}\n            \n            for purpose, count in purpose_counts.items():\n                if total_messages > 0:\n                    percentage = (count / total_messages) * 100\n                else:\n                    percentage = 0\n                \n                purpose_percentages[purpose] = percentage\n            \n            return {\n                \"counts\": purpose_counts,\n                \"percentages\": purpose_percentages\n            }\n        except Exception as e:\n            logger.error(f\"Error analyzing purpose patterns: {str(e)}\")\n            return {\n                \"counts\": {},\n                \"percentages\": {}\n            }\n            \n        # Get all messages\n        messages = self._get_transcript_messages(transcript_id)\n        if not messages:\n            warning_msg = f\"No messages found for transcript {transcript_id}\"\n            logger.warning(warning_msg)\n            return {\"warning\": warning_msg, \"transcript_id\": transcript_id}\n            \n            # Analyze communication patterns\n            direction_stats = self._analyze_direction_patterns(messages)\n            purpose_stats = self._analyz"
  ],
  "source": "claude",
  "timestamp": "2025-03-10T21:12:21.147270Z",
  "data_type": "message",
  "metadata": {
    "author": "human"
  }
}