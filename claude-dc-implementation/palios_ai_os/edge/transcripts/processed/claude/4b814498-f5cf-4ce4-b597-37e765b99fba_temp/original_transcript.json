{
  "data_id": "4b814498-f5cf-4ce4-b597-37e765b99fba",
  "content": [
    "  \n\n\n\n# REQUIRED ACTIONS\n\n**ACTION 29:** Create model integration framework\n```bash\ncat > model_integration.py <<EOL\nimport os\nimport requests\nimport json\nfrom typing import Dict, List, Any, Optional\n\nclass ModelCapability:\n    \"\"\"Represents a specific capability of an AI model.\"\"\"\n    def __init__(self, name: str, description: str, confidence: float = 0.0):\n        self.name = name\n        self.description = description\n        self.confidence = confidence  # Confidence score (0.0-1.0)\n        self.performance_history = []  # Track performance\n    \n    def update_confidence(self, new_score: float):\n        \"\"\"Update confidence score based on observed performance.\"\"\"\n        # Simple moving average\n        self.performance_history.append(new_score)\n        # Only keep last 10 records\n        if len(self.performance_history) > 10:\n            self.performance_history = self.performance_history[-10:]\n        # Update confidence score\n        self.confidence = sum(self.performance_history) / len(self.performance_history)\n    \n    def to_dict(self):\n        return {\n            \"name\": self.name,\n            \"description\": self.description,\n            \"confidence\": self.confidence\n        }\n\nclass AIModel:\n    \"\"\"Base class for AI model integration.\"\"\"\n    def __init__(self, model_id: str, name: str, description: str):\n        self.model_id = model_id\n        self.name = name\n        self.description = description\n        self.capabilities = {}  # name -> ModelCapability\n        self.available = True\n    \n    def add_capability(self, name: str, description: str, confidence: float = 0.7):\n        \"\"\"Add a capability to this model.\"\"\"\n        self.capabilities[name] = ModelCapability(name, description, confidence)\n    \n    def has_capability(self, capability_name: str) -> bool:\n        \"\"\"Check if model has a specific capability.\"\"\"\n        return capability_name in self.capabilities\n    \n    def get_capability_confidence(self, capability_name: str) -> float:\n        \"\"\"Get confidence score for a capability.\"\"\"\n        if not self.has_capability(capability_name):\n            return 0.0\n        return self.capabilities[capability_name].confidence\n    \n    def execute(self, task: Dict) -> Dict:\n        \"\"\"Execute a task - must be implemented by subclasses.\"\"\"\n        raise NotImplementedError(\"Subclasses must implement execute()\")\n    \n    def to_dict(self):\n        return {\n            \"model_id\": self.model_id,\n            \"name\": self.name,\n            \"description\": self.description,\n            \"capabilities\": {name: cap.to_dict() for name, cap in self.capabilities.items()},\n            \"available\": self.available\n        }\n\nclass ClaudeModel(AIModel):\n    \"\"\"Integration with Claude API.\"\"\"\n    def __init__(self, api_key: Optional[str] = None):\n        super().__init__(\"claude\", \"Claude\", \"Anthropic's Claude large language model\")\n        self.api_key = api_key or os.environ.get(\"CLAUDE_API_KEY\", \"\")\n        self.api_url = \"https://api.anthropic.com/v1/messages\"\n        \n        # Add capabilities\n        self.add_capability(\"text-generation\", \"Generate high-quality text content\")\n        self.add_capability(\"reasoning\", \"Complex reasoning and problem-solving\")\n        self.add_capability(\"summarization\", \"Summarize content effectively\")\n        self.add_capability(\"creative-writing\", \"Generate creative content\")\n        self.add_capability(\"structured-data\", \"Work with structured data formats\")\n    \n    def execute(self, task: Dict) -> Dict:\n        \"\"\"Execute a task using Claude API.\"\"\"\n        # Simple mock implementation for now\n        if not task.get(\"prompt\"):\n            return {\"error\": \"Prompt is required\"}\n        \n        # In a real implementation, would call the Claude API\n        # For now, just return a mock response\n        return {\n            \"model\": \"claude\",\n            \"result\": f\"Mock response for: {task['prompt'][:30]}...\",\n            \"success\": True\n        }\n\nclass GrokModel(AIModel):\n    \"\"\"Integration with Grok API.\"\"\"\n    def __init__(self, api_key: Optional[str] = None):\n        super().__init__(\"grok\", \"Grok\", \"Grok AI by xAI\")\n        self.api_key = api_key or os.environ.get(\"GROK_API_KEY\", \"\")\n        \n        # Add capabilities\n        self.add_capability(\"internet-search\", \"Search the internet for information\")\n        self.add_capability(\"knowledge-retrieval\", \"Retrieve factual knowledge\")\n        self.add_capability(\"analysis\", \"Analyze and interpret data\")\n    \n    def execute(self, task: Dict) -> Dict:\n        \"\"\"Execute a task using Grok API.\"\"\"\n        # Simple mock implementation for now\n        if not task.get(\"query\"):\n            return {\"error\": \"Query is required\"}\n        \n        # In a real implementation, would call the Grok API\n        # For now, just return a mock response\n        return {\n            \"model\": \"grok\",\n            \"result\": f\"Mock Grok result for: {task['query'][:30]}...\",\n            \"success\": True\n        }\n\nclass ModelRegistry:\n    \"\"\"Registry of available AI models and their capabilities.\"\"\"\n    def __init__(self):\n        self.models = {}  # model_id -> AIModel\n    \n    def register_model(self, model: AIModel):\n        \"\"\"Register a model in the registry.\"\"\"\n        self.models[model.model_id] = model\n    \n    def get_model(self, model_id: str) -> Optional[AIModel]:\n        \"\"\"Get a model by ID.\"\"\"\n        return self.models.get(model_id)\n    \n    def find_best_model(self, capability: str) -> Optional[AIModel]:\n        \"\"\"Find the best model for a given capability.\"\"\"\n        best_model = None\n        best_confidence = 0.0\n        \n        for model in self.models.values():\n            if not model.available:\n                continue\n                \n            confidence = model.get_capability_confidence(capability)\n            if confidence > best_confidence:\n                best_confidence = confidence\n                best_model = model\n        \n        return best_model\n    \n    def execute_task(self, task: Dict) -> Dict:\n        \"\"\"Execute a task using the best model for the required capability.\"\"\"\n        capability = task.get(\"capability\", \"text-generation\")\n        model_id = task.get(\"model_id\")\n        \n        if model_id:\n            # Use specified model if available\n            model = self.get_model(model_id)\n            if not model or not model.available:\n                return {\"error\": f\"Model {model_id} not available\"}\n        else:\n            # Find best model for capability\n            model = self.find_best_model(capability)\n            if not model:\n                return {\"error\": f\"No model available for capability: {capability}\"}\n        \n        # Execute task with selected model\n        result = model.execute(task)\n        return {\n            \"model_used\": model.model_id,\n            \"capability\": capability,\n            **result\n        }\n    \n    def list_models(self) -> List[Dict]:\n        \"\"\"List all registered models.\"\"\"\n        return [model.to_dict() for model in self.models.values()]\nEOL\n```\n\n**ACTION 30:** Create model routing system\n```bash\ncat > router.py <<EOL\nfrom typing import Dict, List, Any, Optional\nfrom model_integration import ModelRegistry, ClaudeModel, GrokModel\n\nclass TaskRouter:\n    \"\"\"Routes tasks to appropriate AI models based on capabilities.\"\"\"\n    def __init__(self, model_registry: ModelRegistry):\n        self.model_registry = model_registry\n    \n    def analyze_task(self, task_description: str) -> Dict[str, Any]:\n        \"\"\"Analyze a task description to determine required capabilities.\"\"\"\n        # Simple keyword-based analysis for demo purposes\n        # In a real implementation, would use more sophisticated analysis\n        capabilities = []\n        \n        # Check for various capabilities\n        if any(kw in task_description.lower() for kw in ['search', 'find information', 'look up']):\n            capabilities.append((\"internet-search\", 0.9))\n        \n        if any(kw in task_description.lower() for kw in ['create', 'write', 'generate', 'draft']):\n            capabilities.append((\"text-generation\", 0.8))\n        \n        if any(kw in task_description.lower() for kw in ['analyze', 'evaluate', 'assess']):\n            capabilities.append((\"analysis\", 0.7))\n        \n        if any(kw in task_description.lower() for kw in ['reason', 'solve', 'think through']):\n            capabilities.append((\"reasoning\", 0.9))\n        \n        if any(kw in task_description.lower() for kw in ['summarize', 'synopsis', 'tldr']):\n            capabilities.append((\"summarization\", 0.9))\n        \n        if any(kw in task_description.lower() for kw in ['creative', 'story', 'poem']):\n            capabilities.append((\"creative-writing\", 0.8))\n        \n        # Default to text-generation if no capabilities detected\n        if not capabilities:\n            capabilities.append((\"text-generation\", 0.5))\n        \n        # Sort by confidence\n        capabilities.sort(key=lambda x: x[1], reverse=True)\n        \n        return {\n            \"primary_capability\": capabilities[0][0],\n            \"confidence\": capabilities[0][1],\n            \"all_capabilities\": capabilities\n        }\n    \n    def route_task(self, task_description: str, model_id: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"Route a task to the appropriate model.\"\"\"\n        # Analyze task\n        task_analysis = self.analyze_task(task_description)\n        \n        # Prepare task for execution\n        task = {\n            \"description\": task_description,\n            \"capability\": task_analysis[\"primary_capability\"]\n        }\n        \n        # Add model_id if specified\n        if model_id:\n            task[\"model_id\"] = model_id\n        \n        # If task appears to be a search query, format for Grok\n        if task_analysis[\"primary_capability\"] == \"internet-search\":\n            task[\"query\"] = task_description\n        else:\n            # Otherwise format for text generation\n            task[\"prompt\"] = task_description\n        \n        # Execute task\n        result = self.model_registry.execute_task(task)\n        \n        return {\n            \"task_description\": task_description,\n            \"analysis\": task_analysis,\n            \"result\": result\n        }\nEOL\n```\n\n**ACTION 31:** Update main.py to include model integration\n```bash\ncat > main.py <<EOL\nfrom flask import Flask, jsonify, request, render_template\nimport os\nfrom auth import require_api_key\nfrom memory_system import MemorySystem\nfrom model_integration import ModelRegistry, ClaudeModel, GrokModel\nfrom router import TaskRouter\n\napp = Flask(__name__)\n\n# Initialize components\nproject_id = os.environ.get('PROJECT_ID', 'palios-taey-dev')\nmemory_system = MemorySystem(project_id=project_id)\n\n# Initialize model registry\nmodel_registry = ModelRegistry()\nmodel_registry.register_model(ClaudeModel())\nmodel_registry.register_model(GrokModel())\n\n# Initialize task router\ntask_router = TaskRouter(model_registry)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/health')\ndef health():\n    return jsonify({\"status\": \"healthy\", \"version\": \"1.0.0\"})\n\n@app.route('/api/models', methods=['GET'])\n@require_api_key\ndef list_models():\n    models = model_registry.list_models()\n    return jsonify({\"models\": models})\n\n@app.route('/api/tasks', methods=['POST'])\n@require_api_key\ndef execute_task():\n    if not request.is_json:\n        return jsonify({\"error\": \"Request must be JSON\"}), 400\n    \n    data = request.get_json()\n    if 'description' not in data:\n        return jsonify({\"error\": \"Task description required\"}), 400\n    \n    # Route task to appropriate model\n    result = task_router.route_task(\n        task_description=data['description'],\n        model_id=data.get('model_id')\n    )\n    \n    # Store task in memory system\n    memory_id = memory_system.store_memory(\n        content=data['description'],\n        context_id=data.get('context_id', 'default_context'),\n        tier='working',\n        metadata={\n            \"type\": \"task\",\n            \"model_used\": result.get(\"result\", {}).get(\"model_used\", \"unknown\"),\n            \"capability\": result.get(\"analysis\", {}).get(\"primary_capability\", \"unknown\")\n        }\n    )\n    \n    # Add memory ID to result\n    result[\"memory_id\"] = memory_id\n    \n    return jsonify(result)\n\n@app.route('/api/memory', methods=['GET'])\n@require_api_key\ndef list_memories():\n    context_id = request.args.get('context_id', 'default_context')\n    limit = int(request.args.get('limit', 10))\n    memories = memory_system.list_memories(context_id=context_id, limit=limit)\n    return jsonify({\"memories\": memories})\n\n@app.route('/api/memory', methods=['POST'])\n@require_api_key\ndef store_memory():\n    if not request.is_json:\n        return jsonify({\"error\": \"Request must be JSON\"}), 400\n    \n    data = request.get_json()\n    if 'content' not in data:\n        return jsonify({\"error\": \"Memory content required\"}), 400\n    \n    context_id = data.get('context_id', 'default_context')\n    tier = data.get('tier', 'working')\n    metadata = data.get('metadata', {})\n    \n    memory_id = memory_system.store_memory(\n        content=data['content'],\n        context_id=context_id,\n        tier=tier,\n        metadata=metadata\n    )\n    \n    return jsonify({\n        \"memory_id\": memory_id,\n        \"status\": \"success\"\n    })\n\n@app.route('/api/memory/<memory_id>', methods=['GET'])\n@require_api_key\ndef get_memory(memory_id):\n    memory = memory_system.retrieve_memory(memory_id)\n    if memory is None:\n        return jsonify({\"error\": \"Memory not found\"}), 404\n    \n    return jsonify(memory)\n\n@app.route('/api/transcripts', methods=['POST'])\n@require_api_key\ndef process_transcript():\n    if not request.is_json:\n        return jsonify({\"error\": \"Request must be JSON\"}), 400\n    \n    data = request.get_json()\n    if 'text' not in data:\n        return jsonify({\"error\": \"Transcript text required\"}), 400\n    \n    # Simple processing for now\n    word_count = len(data['text'].split())\n    \n    # Store transcript in memory system\n    memory_id = memory_system.store_memory(\n        content=data['text'],\n        context_id=data.get('context_id', 'default_context'),\n        tier='reference',\n        metadata={\"type\": \"transcript\", \"word_count\": word_count}\n    )\n    \n    return jsonify({\n        \"processed\": True,\n        \"word_count\": word_count,\n        \"memory_id\": memory_id,\n        \"status\": \"success\"\n    })\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))\nEOL\n```\n\n**ACTION 32:** Update dashboard to include task routing\n```bash\ncat > templates/index.html <<EOL\n<!DOCTYPE html>\n<html>\n<head>\n    <title>PALIOS-TAEY Dashboard</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\">\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\"></script>\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1>PALIOS-TAEY Dashboard</h1>\n        <div class=\"row mt-4\">\n            <div class=\"col-md-6\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        System Status\n                    </div>\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Health Check</h5>\n                        <p class=\"card-text\" id=\"health-status\">Checking...</p>\n                        <button class=\"btn btn-primary\" onclick=\"checkHealth()\">Refresh</button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-6\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        Available Models\n                    </div>\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">AI Models</h5>\n                        <div id=\"models-list\">Loading...</div>\n                        <button class=\"btn btn-primary\" onclick=\"loadModels()\">Refresh</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"row mt-4\">\n            <div class=\"col-12\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        Task Execution\n                    </div>\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Execute Task</h5>\n                        <textarea class=\"form-control\" id=\"task-description\" rows=\"3\" placeholder=\"Describe your task here...\"></textarea>\n                        <div class=\"row mt-2\">\n                            <div class=\"col-md-6\">\n                                <select class=\"form-select\" id=\"task-model\">\n                                    <option value=\"\">Auto-select best model</option>\n                                    <option value=\"claude\">Claude</option>\n                                    <option value=\"grok\">Grok</option>\n                                </select>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <button class=\"btn btn-primary w-100\" onclick=\"executeTask()\">Execute Task</button>\n                            </div>\n                        </div>\n                        <div class=\"mt-3\">\n                            <h6>Task Analysis:</h6>\n                            <div id=\"task-analysis\"></div>\n                        </div>\n                        <div class=\"mt-3\">\n                            <h6>Task Result:</h6>\n                            <div id=\"task-result\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"row mt-4\">\n            <div class=\"col-md-6\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        Transcript Processing\n                    </div>\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Process Transcript</h5>\n                        <textarea class=\"form-control\" id=\"transcript-text\" rows=\"5\" placeholder=\"Enter transcript text here...\"></textarea>\n                        <button class=\"btn btn-primary mt-3\" onclick=\"processTranscript()\">Process</button>\n                        <div class=\"mt-3\" id=\"transcript-result\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-6\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        Memory System\n                    </div>\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Memories</h5>\n                        <div id=\"memories-list\">Loading...</div>\n                        <button class=\"btn btn-primary\" onclick=\"loadMemories()\">Refresh</button>\n                        \n                        <h5 class=\"card-title mt-4\">Store New Memory</h5>\n                        <textarea class=\"form-control\" id=\"memory-content\" rows=\"3\" placeholder=\"Enter memory content...\"></textarea>\n                        <select class=\"form-select mt-2\" id=\"memory-tier\">\n                            <option value=\"ephemeral\">Ephemeral (12 hours)</option>\n                            <option value=\"working\" selected>Working (14 days)</option>\n                            <option value=\"reference\">Reference (6 months)</option>\n                            <option value=\"archival\">Archival (permanent)</option>\n                        </select>\n                        <button class=\"btn btn-primary mt-3\" onclick=\"storeMemory()\">Store Memory</button>\n                        <div class=\"mt-3\" id=\"memory-result\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Set your API key here - in production this would be better secured\n        const API_KEY = \"test_key_123\";\n        \n        async function checkHealth() {\n            try {\n                const response = await fetch('/health');\n                const data = await response.json();\n                document.getElementById('health-status').textContent = \n                    `Status: ${data.status}, Version: ${data.version}`;\n            } catch (error) {\n                document.getElementById('health-status').textContent = \n                    `Error: ${error.message}`;\n            }\n        }\n        \n        async function loadModels() {\n            try {\n                const response = await fetch('/api/models', {\n                    headers: { 'X-API-Key': API_KEY }\n                });\n                const data = await response.json();\n                \n                if (response.ok) {\n                    const modelsList = document.getElementById('models-list');\n                    modelsList.innerHTML = '';\n                    \n                    if (!data.models || data.models.length === 0) {\n                        modelsList.textContent = 'No models available';\n                        return;\n                    }\n                    \n                    const table = document.createElement('table');\n                    table.className = 'table table-sm';\n                    \n                    // Header\n                    const thead = document.createElement('thead');\n                    const headerRow = document.createElement('tr');\n                    ['Model', 'Capabilities'].forEach(text => {\n                        const th = document.createElement('th');\n                        th.textContent = text;\n                        headerRow.appendChild(th);\n                    });\n                    thead.appendChild(headerRow);\n                    table.appendChild(thead);\n                    \n                    // Body\n                    const tbody = document.createElement('tbody');\n                    data.models.forEach(model => {\n                        const row = document.createElement('tr');\n                        \n                        // Model name\n                        const nameCell = document.createElement('td');\n                        nameCell.textContent = model.name;\n                        row.appendChild(nameCell);\n                        \n                        // Capabilities\n                        const capCell = document.createElement('td');\n                        if (model.capabilities) {\n                            const capList = Object.keys(model.capabilities).join(', ');\n                            capCell.textContent = capList;\n                        } else {\n                            capCell.textContent = 'None';\n                        }\n                        row.appendChild(capCell);\n                        \n                        tbody.appendChild(row);\n                    });\n                    table.appendChild(tbody);\n                    \n                    modelsList.appendChild(table);\n                    \n                    // Update model dropdown\n                    const modelSelect = document.getElementById('task-model');\n                    // Clear existing options except the first\n                    while (modelSelect.options.length > 1) {\n                        modelSelect.remove(1);\n                    }\n                    \n                    // Add model options\n                    data.models.forEach(model => {\n                        const option = document.createElement('option');\n                        option.value = model.model_id;\n                        option.textContent = model.name;\n                        modelSelect.appendChild(option);\n                    });\n                } else {\n                    document.getElementById('models-list').textContent = \n                        `Error: ${data.error || 'Failed to load models'}`;\n                }\n            } catch (error) {\n                document.getElementById('models-list').textContent = \n                    `Error: ${error.message}`;\n            }\n        }\n        \n        async function executeTask() {\n            const description = document.getElementById('task-description').value;\n            if (!description) {\n                document.getElementById('task-analysis').textContent = \n                    'Please enter a task description';\n                return;\n            }\n            \n            const modelId = document.getElementById('task-model').value;\n            \n            try {\n                const response = await fetch('/api/tasks', {\n                    method: 'POST',\n                    headers: { \n                        'Content-Type': 'application/json',\n                        'X-API-Key': API_KEY\n                    },\n                    body: JSON.stringify({ \n                        description,\n                        model_id: modelId || undefined\n                    })\n                });\n                \n                const data = await response.json();\n                \n                if (response.ok) {\n                    // Display analysis\n                    const analysisDiv = document.getElementById('task-analysis');\n                    if (data.analysis) {\n                        const capability = data.analysis.primary_capability;\n                        const confidence = data.analysis.confidence;\n                        analysisDiv.innerHTML = `\n                            <p><strong>Primary Capability:</strong> ${capability}</p>\n                            <p><strong>Confidence:</strong> ${(confidence * 100).toFixed(1)}%</p>\n                        `;\n                        \n                        if (data.analysis.all_capabilities) {\n                            const ul = document.createElement('ul');\n                            ul.className = 'list-unstyled small';\n                            \n                            data.analysis.all_capabilities.forEach(([cap, conf]) => {\n                                const li = document.createElement('li');\n                                li.textContent = `${cap}: ${(conf * 100).toFixed(1)}%`;\n                                ul.appendChild(li);\n                            });\n                            \n                            analysisDiv.appendChild(ul);\n                        }\n                    } else {\n                        analysisDiv.textContent = 'No analysis available';\n                    }\n                    \n                    // Display result\n                    const resultDiv = document.getElementById('task-result');\n                    if (data.result) {\n                        resultDiv.innerHTML = `\n                            <p><strong>Model Used:</strong> ${data.result.model_used || 'Unknown'}</p>\n                            <div class=\"card bg-light\">\n                                <div class=\"card-body\">\n                                    <pre class=\"mb-0\">${data.result.result || 'No result'}</pre>\n                                </div>\n                            </div>\n                        `;\n                    } else {\n                        resultDiv.textContent = 'No result available';\n                    }\n                    \n                    // Refresh memories after task execution\n                    loadMemories();\n                } else {\n                    document.getElementById('task-analysis').textContent = \n                        `Error: ${data.error || 'Failed to execute task'}`;\n                    document.getElementById('task-result').textContent = '';\n                }\n            } catch (error) {\n                document.getElementById('task-analysis').textContent = \n                    `Error: ${error.message}`;\n                document.getElementById('task-result').textContent = '';\n            }\n        }\n        \n        async function processTranscript() {\n            const text = document.getElementById('transcript-text').value;\n            if (!text) {\n                document.getElementById('transcript-result').textContent = \n                    'Please enter transcript text';\n                return;\n            }\n            \n            try {\n                const response = await fetch('/api/transcripts', {\n                    method: 'POST',\n                    headers: { \n                        'Content-Type': 'application/json',\n                        'X-API-Key': API_KEY\n                    },\n                    body: JSON.stringify({ text })\n                });\n                \n                const data = await response.json();\n                \n                if (response.ok) {\n                    document.getElementById('transcript-result').textContent = \n                        `Processing successful: ${JSON.stringify(data)}`;\n                    // Refresh memories after storing transcript\n                    loadMemories();\n                } else {\n                    document.getElementById('transcript-result').textContent = \n                        `Error: ${data.error || 'Failed to process transcript'}`;\n                }\n            } catch (error) {\n                document.getElementById('transcript-result').textContent = \n                    `Error: ${error.message}`;\n            }\n        }\n        \n        async function loadMemories() {\n            try {\n                const response = await fetch('/api/memory', {\n                    headers: { 'X-API-Key': API_KEY }\n                });\n                const data = await response.json();\n                \n                if (response.ok) {\n                    const memoriesList = document.getElementById('memories-list');\n                    \n                    if (!data.memories || data.memories.length === 0) {\n                        memoriesList.textContent = 'No memories found';\n                        return;\n                    }\n                    \n                    memoriesList.innerHTML = '';\n                    const table = document.createElement('table');\n                    table.className = 'table table-sm';\n                    \n                    // Create header\n                    const thead = document.createElement('thead');\n                    const headerRow = document.createElement('tr');\n                    ['ID', 'Content', 'Tier', 'Type'].forEach(text => {\n                        const th = document.createElement('th');\n                        th.textContent = text;\n                        headerRow.appendChild(th);\n                    });\n                    thead.appendChild(headerRow);\n                    table.appendChild(thead);\n                    \n                    // Create body\n                    const tbody = document.createElement('tbody');\n                    data.memories.forEach(memory => {\n                        const row = document.createElement('tr');\n                        \n                        // ID column (truncated)\n                        const idCell = document.createElement('td');\n                        idCell.textContent = memory.memory_id.substring(0, 8) + '...';\n                        row.appendChild(idCell);\n                        \n                        // Content column (truncated)\n                        const contentCell = document.createElement('td');\n                        contentCell.textContent = memory.content.substring(0, 30) + \n                            (memory.content.length > 30 ? '...' : '');\n                        row.appendChild(contentCell);\n                        \n                        // Tier column\n                        const tierCell = document.createElement('td');\n                        tierCell.textContent = memory.tier;\n                        row.appendChild(tierCell);\n                        \n                        // Type column\n                        const typeCell = document.createElement('td');\n                        const type = memory.metadata && memory.metadata.type \n                            ? memory.metadata.type \n                            : 'unknown';\n                        typeCell.textContent = type;\n                        row.appendChild(typeCell);\n                        \n                        tbody.appendChild(row);\n                    });\n                    table.appendChild(tbody);\n                    \n                    memoriesList.appendChild(table);\n                } else {\n                    document.getElementById('memories-list').textContent = \n                        `Error: ${data.error || 'Failed to load memories'}`;\n                }\n            } catch (error) {\n                document.getElementById('memories-list"
  ],
  "source": "claude",
  "timestamp": "2025-03-15T03:35:55.826498Z",
  "data_type": "message",
  "metadata": {
    "author": "assistant"
  }
}