{
  "data_id": "5d7a5a62-28b7-4dd8-88f4-b1e88ef1cce0",
  "content": [
    " Excellent! I'm glad the memory system is successfully deployed and healthy. Let's continue with our incremental deployment plan by adding the model registry and routing modules next.\n\n# Phase 3: Models and Routing Deployment\n\nNow that we have the memory system up and running, we'll deploy the model registry and routing modules. These components are critical for AI model selection and routing tasks to the appropriate models.\n\n## Step 1: Create the Model and Routing Integration\n\nLet's create the integration code that connects the existing model registry and routing modules to our application:\n\n```bash\n# Create models and routing integration - copy entire box\ncat > palios-taey-app/models_integration.py <<'EOF'\n\"\"\"\nPALIOS-TAEY Models and Routing Integration\n\nThis module provides the integration layer for the model registry and routing components.\n\"\"\"\nimport os\nimport sys\nimport logging\nfrom datetime import datetime\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\nlogger = logging.getLogger(__name__)\n\n# Add the src directory to the path so we can import the modules\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n# Import model registry\ntry:\n    from src.palios_taey.models.registry import get_model_registry\n    logger.info(\"Successfully imported model registry\")\n    MODEL_REGISTRY_IMPORT_SUCCESS = True\nexcept ImportError as e:\n    logger.error(f\"Failed to import model registry: {e}\")\n    MODEL_REGISTRY_IMPORT_SUCCESS = False\n\n# Import model router\ntry:\n    from src.palios_taey.routing.router import get_model_router\n    logger.info(\"Successfully imported model router\")\n    MODEL_ROUTER_IMPORT_SUCCESS = True\nexcept ImportError as e:\n    logger.error(f\"Failed to import model router: {e}\")\n    MODEL_ROUTER_IMPORT_SUCCESS = False\n\ndef initialize_model_registry():\n    \"\"\"\n    Initialize the model registry with GCP-specific configuration\n    \n    Returns:\n        Initialized model registry instance\n    \"\"\"\n    if not MODEL_REGISTRY_IMPORT_SUCCESS:\n        logger.error(\"Cannot initialize model registry - import failed\")\n        return None\n    \n    # Get configuration from environment\n    config_dir = os.environ.get(\"MODELS_CONFIG_DIR\", \"config/model_capabilities\")\n    use_mock = os.environ.get(\"USE_MOCK_RESPONSES\", \"False\").lower() == \"true\"\n    \n    try:\n        # Create the model registry using the factory function from the original module\n        model_registry = get_model_registry(config_dir=config_dir)\n        \n        # Ensure the registry has at least default models\n        if not model_registry.model_capabilities and (use_mock or len(model_registry.model_capabilities) == 0):\n            # Initialize with some default models for testing\n            model_registry.register_model(\n                \"claude\", \n                {\n                    \"document_summary\": 0.95,\n                    \"transcript_processing\": 0.9,\n                    \"general\": 0.92\n                }\n            )\n            \n            model_registry.register_model(\n                \"gemini\", \n                {\n                    \"document_summary\": 0.9,\n                    \"code_generation\": 0.85,\n                    \"general\": 0.8\n                }\n            )\n            \n            logger.info(\"Registered default models in model registry\")\n        \n        logger.info(\"Model registry initialized successfully\")\n        return model_registry\n    except Exception as e:\n        logger.error(f\"Failed to initialize model registry: {e}\")\n        return None\n\ndef initialize_model_router(model_registry=None):\n    \"\"\"\n    Initialize the model router with GCP-specific configuration\n    \n    Args:\n        model_registry: Existing model registry instance\n        \n    Returns:\n        Initialized model router instance\n    \"\"\"\n    if not MODEL_ROUTER_IMPORT_SUCCESS:\n        logger.error(\"Cannot initialize model router - import failed\")\n        return None\n    \n    # Get configuration from environment\n    min_capability_score = float(os.environ.get(\"MIN_CAPABILITY_SCORE\", \"0.7\"))\n    use_mock = os.environ.get(\"USE_MOCK_RESPONSES\", \"False\").lower() == \"true\"\n    \n    try:\n        # Create the model router using the factory function from the original module\n        model_router = get_model_router(\n            min_capability_score=min_capability_score,\n            use_mock=use_mock\n        )\n        \n        logger.info(f\"Model router initialized with min_capability_score: {min_capability_score}\")\n        return model_router\n    except Exception as e:\n        logger.error(f\"Failed to initialize model router: {e}\")\n        return None\nEOF\n```\n\n## Step 2: Update the Main Application\n\nNow, let's update our main application to incorporate the model registry and routing modules:\n\n```bash\n# Update the main application - copy entire box\ncat > palios-taey-app/app.py <<'EOF'\n\"\"\"\nPALIOS-TAEY Main Application\n\nThis is the main entry point for the PALIOS-TAEY application,\nintegrating the core modules with the GCP environment.\n\"\"\"\nimport os\nimport logging\nimport json\nfrom flask import Flask, jsonify, request, render_template\nfrom functools import wraps\nfrom dotenv import load_dotenv\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\nlogger = logging.getLogger(__name__)\n\n# Load environment variables\nload_dotenv()\n\n# Import core error types for exception handling\nfrom integration import (\n    PaliosTaeyError, ValidationError, NotFoundError,\n    AuthorizationError, ConfigurationError, ExternalServiceError\n)\n\n# Initialize memory system\nfrom integration import initialize_memory_system\nmemory_system = initialize_memory_system()\n\n# Initialize model registry and router\nfrom models_integration import initialize_model_registry, initialize_model_router\nmodel_registry = initialize_model_registry()\nmodel_router = initialize_model_router(model_registry)\n\n# Flask application instance\napp = Flask(__name__, template_folder=\"templates\")\n\n# API Key authentication\nAPI_KEYS = {\n    \"test_key\": \"development\"\n}\n\ndef require_api_key(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        api_key = request.headers.get('X-API-Key')\n        if api_key and api_key in API_KEYS:\n            return f(*args, **kwargs)\n        return jsonify({\"error\": \"Invalid or missing API key\"}), 401\n    return decorated_function\n\n# Routes\n@app.route('/')\ndef index():\n    \"\"\"Home page with dashboard\"\"\"\n    return render_template('index.html')\n\n@app.route('/health')\ndef health():\n    \"\"\"Health check endpoint\"\"\"\n    # Check component health\n    memory_status = \"healthy\"\n    memory_mode = \"unknown\"\n    model_registry_status = \"healthy\"\n    model_router_status = \"healthy\"\n    \n    # Check memory system\n    if memory_system:\n        try:\n            memory_mode = \"mock\" if getattr(memory_system, 'use_mock', True) else \"firestore\"\n            memory_system._ensure_default_context()\n        except Exception as e:\n            memory_status = f\"error: {str(e)}\"\n    else:\n        memory_status = \"not_initialized\"\n    \n    # Check model registry\n    if model_registry:\n        try:\n            # Verify model registry by checking capabilities\n            capabilities = model_registry.get_capability_summary()\n            model_count = capabilities.get('model_count', 0)\n            if model_count == 0:\n                model_registry_status = \"warning: no models registered\"\n        except Exception as e:\n            model_registry_status = f\"error: {str(e)}\"\n    else:\n        model_registry_status = \"not_initialized\"\n    \n    # Check model router\n    if model_router:\n        try:\n            router_status = model_router.get_status()\n            if not router_status.get('status') == 'active':\n                model_router_status = f\"error: {router_status.get('status')}\"\n        except Exception as e:\n            model_router_status = f\"error: {str(e)}\"\n    else:\n        model_router_status = \"not_initialized\"\n\n    return jsonify({\n        \"status\": \"healthy\",\n        \"version\": \"1.0.0\",\n        \"components\": {\n            \"memory\": {\n                \"status\": memory_status,\n                \"mode\": memory_mode\n            },\n            \"model_registry\": {\n                \"status\": model_registry_status\n            },\n            \"model_router\": {\n                \"status\": model_router_status\n            }\n        }\n    })\n\n# Memory API endpoints\n@app.route('/api/memory/store', methods=['POST'])\n@require_api_key\ndef memory_store():\n    \"\"\"Store a memory item\"\"\"\n    try:\n        # Validate memory system is available\n        if not memory_system:\n            return jsonify({\"error\": \"Memory system not available\"}), 503\n            \n        # Parse request data\n        data = request.json\n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        \n        # Extract parameters\n        content = data.get(\"content\")\n        context_id = data.get(\"context_id\")\n        metadata = data.get(\"metadata\")\n        tags = data.get(\"tags\")\n        relationships = data.get(\"relationships\")\n        tier = data.get(\"tier\")\n        \n        # Use the memory system to store the item\n        memory_id = memory_system.store(\n            content=content,\n            context_id=context_id,\n            metadata=metadata,\n            tags=tags,\n            relationships=relationships,\n            initial_tier=tier\n        )\n        \n        return jsonify({\n            \"memory_id\": memory_id,\n            \"status\": \"success\"\n        })\n    except ValidationError as e:\n        return jsonify({\"error\": str(e)}), 400\n    except Exception as e:\n        logger.error(f\"Error in memory_store: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/memory/retrieve/<memory_id>', methods=['GET'])\n@require_api_key\ndef memory_retrieve(memory_id):\n    \"\"\"Retrieve a memory item\"\"\"\n    try:\n        # Validate memory system is available\n        if not memory_system:\n            return jsonify({\"error\": \"Memory system not available\"}), 503\n            \n        # Get request parameters\n        context_id = request.args.get('context_id')\n        \n        # Retrieve the memory item\n        memory_item = memory_system.retrieve(\n            memory_id=memory_id,\n            context_id=context_id\n        )\n        \n        # Check if item was found\n        if memory_item is None:\n            return jsonify({\"error\": \"Memory item not found\"}), 404\n        \n        return jsonify({\n            \"memory_item\": memory_item,\n            \"status\": \"success\"\n        })\n    except NotFoundError as e:\n        return jsonify({\"error\": str(e)}), 404\n    except Exception as e:\n        logger.error(f\"Error in memory_retrieve: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/memory/query', methods=['POST'])\n@require_api_key\ndef memory_query():\n    \"\"\"Query memory items\"\"\"\n    try:\n        # Validate memory system is available\n        if not memory_system:\n            return jsonify({\"error\": \"Memory system not available\"}), 503\n            \n        # Parse request data\n        data = request.json\n        if not data:\n            return jsonify({\"error\": \"No query parameters provided\"}), 400\n        \n        # Extract query parameters\n        query_text = data.get(\"query_text\")\n        filters = data.get(\"filters\")\n        context_id = data.get(\"context_id\")\n        limit = data.get(\"limit\", 10)\n        include_tiers = data.get(\"include_tiers\")\n        \n        # Execute the query\n        memory_items = memory_system.query(\n            query_text=query_text,\n            filters=filters,\n            context_id=context_id,\n            limit=limit,\n            include_tiers=include_tiers\n        )\n        \n        return jsonify({\n            \"results\": memory_items,\n            \"count\": len(memory_items),\n            \"status\": \"success\"\n        })\n    except ValidationError as e:\n        return jsonify({\"error\": str(e)}), 400\n    except Exception as e:\n        logger.error(f\"Error in memory_query: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n# Initialize API endpoints for memory contexts\n@app.route('/api/memory/create_context', methods=['POST'])\n@require_api_key\ndef memory_create_context():\n    \"\"\"Create a memory context\"\"\"\n    try:\n        # Validate memory system is available\n        if not memory_system:\n            return jsonify({\"error\": \"Memory system not available\"}), 503\n            \n        # Parse request data\n        data = request.json\n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        \n        # Extract parameters\n        name = data.get(\"name\")\n        if not name:\n            return jsonify({\"error\": \"Context name is required\"}), 400\n            \n        description = data.get(\"description\", \"\")\n        initial_memory_ids = data.get(\"initial_memory_ids\", [])\n        \n        # Create the context\n        context_id = memory_system.create_context(\n            name=name,\n            description=description,\n            initial_memory_ids=initial_memory_ids\n        )\n        \n        return jsonify({\n            \"context_id\": context_id,\n            \"status\": \"success\"\n        })\n    except ValidationError as e:\n        return jsonify({\"error\": str(e)}), 400\n    except Exception as e:\n        logger.error(f\"Error in memory_create_context: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/memory/get_context/<context_id>', methods=['GET'])\n@require_api_key\ndef memory_get_context(context_id):\n    \"\"\"Get a memory context\"\"\"\n    try:\n        # Validate memory system is available\n        if not memory_system:\n            return jsonify({\"error\": \"Memory system not available\"}), 503\n            \n        # Get the context\n        context = memory_system.get_context(context_id)\n        \n        # Check if context was found\n        if context is None:\n            return jsonify({\"error\": \"Context not found\"}), 404\n        \n        return jsonify({\n            \"context\": context,\n            \"status\": \"success\"\n        })\n    except NotFoundError as e:\n        return jsonify({\"error\": str(e)}), 404\n    except Exception as e:\n        logger.error(f\"Error in memory_get_context: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n# Model Registry API endpoints\n@app.route('/api/models/list', methods=['GET'])\n@require_api_key\ndef models_list():\n    \"\"\"List available models\"\"\"\n    try:\n        # Validate model registry is available\n        if not model_registry:\n            return jsonify({\"error\": \"Model registry not available\"}), 503\n        \n        # Get request parameters\n        task_type = request.args.get('task_type')\n        min_capability = request.args.get('min_capability')\n        \n        if min_capability:\n            try:\n                min_capability = float(min_capability)\n            except ValueError:\n                return jsonify({\"error\": \"Invalid min_capability value\"}), 400\n        \n        # Get models from registry\n        models = model_registry.list_models(\n            task_type=task_type,\n            min_capability=min_capability\n        )\n        \n        return jsonify({\n            \"models\": models,\n            \"count\": len(models),\n            \"status\": \"success\"\n        })\n    except Exception as e:\n        logger.error(f\"Error in models_list: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/models/register', methods=['POST'])\n@require_api_key\ndef models_register():\n    \"\"\"Register a model in the registry\"\"\"\n    try:\n        # Validate model registry is available\n        if not model_registry:\n            return jsonify({\"error\": \"Model registry not available\"}), 503\n        \n        # Parse request data\n        data = request.json\n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        \n        # Extract parameters\n        model_id = data.get(\"model_id\")\n        if not model_id:\n            return jsonify({\"error\": \"Model ID is required\"}), 400\n            \n        capabilities = data.get(\"capabilities\", {})\n        persist = data.get(\"persist\", True)\n        \n        # Register the model\n        success = model_registry.register_model(\n            model_id=model_id,\n            capabilities=capabilities,\n            persist=persist\n        )\n        \n        if not success:\n            return jsonify({\"error\": \"Failed to register model\"}), 500\n        \n        return jsonify({\n            \"model_id\": model_id,\n            \"status\": \"success\"\n        })\n    except ValidationError as e:\n        return jsonify({\"error\": str(e)}), 400\n    except Exception as e:\n        logger.error(f\"Error in models_register: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/models/capabilities/<model_id>', methods=['GET'])\n@require_api_key\ndef models_get_capabilities(model_id):\n    \"\"\"Get capabilities for a specific model\"\"\"\n    try:\n        # Validate model registry is available\n        if not model_registry:\n            return jsonify({\"error\": \"Model registry not available\"}), 503\n        \n        # Get capabilities\n        capabilities = model_registry.get_model_capabilities(model_id)\n        \n        if not capabilities:\n            return jsonify({\"error\": f\"Model {model_id} not found\"}), 404\n        \n        return jsonify({\n            \"model_id\": model_id,\n            \"capabilities\": capabilities,\n            \"status\": \"success\"\n        })\n    except Exception as e:\n        logger.error(f\"Error in models_get_capabilities: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n# Model Router API endpoints\n@app.route('/api/router/route', methods=['POST'])\n@require_api_key\ndef router_route_task():\n    \"\"\"Route a task to the appropriate model\"\"\"\n    try:\n        # Validate model router is available\n        if not model_router:\n            return jsonify({\"error\": \"Model router not available\"}), 503\n        \n        # Parse request data\n        data = request.json\n        if not data:\n            return jsonify({\"error\": \"No task data provided\"}), 400\n        \n        # Extract excluded models if provided\n        excluded_models = data.get(\"excluded_models\", [])\n        \n        # Route the task\n        selected_model = model_router.route_task(data, excluded_models)\n        \n        return jsonify({\n            \"task_id\": data.get(\"task_id\", \"unknown\"),\n            \"selected_model\": selected_model,\n            \"status\": \"success\"\n        })\n    except Exception as e:\n        logger.error(f\"Error in router_route_task: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route('/api/router/suggest', methods=['GET'])\n@require_api_key\ndef router_suggest_models():\n    \"\"\"Get model suggestions for a task type\"\"\"\n    try:\n        # Validate model router is available\n        if not model_router:\n            return jsonify({\"error\": \"Model router not available\"}), 503\n        \n        # Get request parameters\n        task_type = request.args.get('task_type', 'general')\n        count = request.args.get('count', '3')\n        \n        try:\n            count = int(count)\n        except ValueError:\n            count = 3\n        \n        # Get suggestions\n        suggestions = model_router.get_model_suggestions(\n            task_type=task_type,\n            count=count\n        )\n        \n        return jsonify({\n            \"task_type\": task_type,\n            \"suggestions\": suggestions,\n            \"status\": \"success\"\n        })\n    except Exception as e:\n        logger.error(f\"Error in router_suggest_models: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n# Error handlers\n@app.errorhandler(ValidationError)\ndef handle_validation_error(e):\n    return jsonify({\"error\": str(e)}), 400\n\n@app.errorhandler(NotFoundError)\ndef handle_not_found_error(e):\n    return jsonify({\"error\": str(e)}), 404\n\n@app.errorhandler(AuthorizationError)\ndef handle_authorization_error(e):\n    return jsonify({\"error\": str(e)}), 401\n\n@app.errorhandler(ConfigurationError)\ndef handle_configuration_error(e):\n    return jsonify({\"error\": str(e)}), 500\n\n@app.errorhandler(ExternalServiceError)\ndef handle_external_service_error(e):\n    return jsonify({\"error\": str(e)}), 502\n\nif __name__ == \"__main__\":\n    port = int(os.environ.get(\"PORT\", 8080))\n    logger.info(f\"Starting PALIOS-TAEY application on port {port}\")\n    logger.info(f\"Memory system: {'Available' if memory_system else 'Not available'}\")\n    logger.info(f\"Model registry: {'Available' if model_registry else 'Not available'}\")\n    logger.info(f\"Model router: {'Available' if model_router else 'Not available'}\")\n    app.run(host=\"0.0.0.0\", port=port)\nEOF\n```\n\n## Step 3: Create a Verification Script for Models and Routing\n\nLet's create a verification script to test our model registry and routing functionality:\n\n```bash\n# Create models verification script - copy entire box\ncat > palios-taey-app/verify_models.py <<'EOF'\n\"\"\"\nModels and Routing Verification Script\n\nThis script tests the deployed Models and Routing functionality.\n\"\"\"\nimport os\nimport sys\nimport json\nimport requests\nimport logging\nimport uuid\nfrom datetime import datetime\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\nlogger = logging.getLogger(__name__)\n\n# Configuration\nAPI_URL = os.environ.get(\"API_URL\", \"http://localhost:8080\")\nAPI_KEY = os.environ.get(\"API_KEY\", \"test_key\")\n\ndef test_health():\n    \"\"\"Test the health endpoint to check model registry and router\"\"\"\n    url = f\"{API_URL}/health\"\n    \n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        data = response.json()\n        \n        logger.info(f\"Health check: {data['status']}\")\n        \n        # Check model registry status\n        if 'components' in data and 'model_registry' in data['components']:\n            registry_status = data['components']['model_registry']['status']\n            logger.info(f\"Model registry status: {registry_status}\")\n            \n            if not registry_status.startswith(\"healthy\"):\n                logger.warning(f\"Model registry may have issues: {registry_status}\")\n        \n        # Check model router status        \n        if 'components' in data and 'model_router' in data['components']:\n            router_status = data['components']['model_router']['status']\n            logger.info(f\"Model router status: {router_status}\")\n            \n            if not router_status.startswith(\"healthy\"):\n                logger.warning(f\"Model router may have issues: {router_status}\")\n        \n        return True\n    except Exception as e:\n        logger.error(f\"Health check failed: {str(e)}\")\n        return False\n\ndef test_models_list():\n    \"\"\"Test listing models from the registry\"\"\"\n    url = f\"{API_URL}/api/models/list\"\n    headers = {\"X-API-Key\": API_KEY}\n    \n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n        \n        models_count = data.get('count', 0)\n        logger.info(f\"Models list returned {models_count} models\")\n        \n        if models_count > 0:\n            logger.info(f\"Available models: {[m.get('model_id') for m in data.get('models', [])]}\")\n        \n        return models_count\n    except Exception as e:\n        logger.error(f\"Models list failed: {str(e)}\")\n        return 0\n\ndef test_model_registration():\n    \"\"\"Test registering a new model\"\"\"\n    url = f\"{API_URL}/api/models/register\"\n    headers = {\"X-API-Key\": API_KEY}\n    \n    # Generate a unique model ID for testing\n    model_id = f\"test-model-{uuid.uuid4()}\"\n    \n    payload = {\n        \"model_id\": model_id,\n        \"capabilities\": {\n            \"general\": 0.85,\n            \"document_summary\": 0.75,\n            \"code_generation\": 0.9\n        }\n    }\n    \n    try:\n        response = requests.post(url, json=payload, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n        \n        logger.info(f\"Registered test model: {model_id}\")\n        return model_id\n    except Exception as e:\n        logger.error(f\"Model registration failed: {str(e)}\")\n        return None\n\ndef test_model_capabilities(model_id):\n    \"\"\"Test getting capabilities for a specific model\"\"\"\n    url = f\"{API_URL}/api/models/capabilities/{model_id}\"\n    headers = {\"X-API-Key\": API_KEY}\n    \n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n        \n        capabilities = data.get('capabilities', {})\n        logger.info(f\"Retrieved capabilities for model {model_id}\")\n        logger.info(f\"Capabilities: {capabilities}\")\n        \n        return len(capabilities) > 0\n    except Exception as e:\n        logger.error(f\"Model capabilities retrieval failed: {str(e)}\")\n        return False\n\ndef test_route_task():\n    \"\"\"Test routing a task to a model\"\"\"\n    url = f\"{API_URL}/api/router/route\"\n    headers = {\"X-API-Key\": API_KEY}\n    \n    # Create a test task\n    task = {\n        \"task_id\": f\"test-task-{uuid.uuid4()}\",\n        \"task_type\": \"document_summary\",\n        \"content\": {\n            \"document\": \"This is a test document for routing verification.\",\n            \"options\": {\"max_length\": 100}\n        }\n    }\n    \n    try:\n        response = requests.post(url, json=task, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n        \n        selected_model = data.get('selected_model')\n        logger.info(f\"Task routed to model: {selected_model}\")\n        \n        return selected_model is not None\n    except Exception as e:\n        logger.error(f\"Task routing failed: {str(e)}\")\n        return False\n\ndef test_model_suggestions():\n    \"\"\"Test getting model suggestions for a task type\"\"\"\n    url = f\"{API_URL}/api/router/suggest?task_type=document_summary&count=2\"\n    headers = {\"X-API-Key\": API_KEY}\n    \n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n        \n        suggestions = data.get('suggestions', [])\n        logger.info(f\"Received {len(suggestions)} model suggestions for document_summary\")\n        \n        for suggestion in suggestions:\n            logger.info(f\"Suggested model: {suggestion}\")\n        \n        return len(suggestions) > 0\n    except Exception as e:\n        logger.error(f\"Model suggestions failed: {str(e)}\")\n        return False\n\ndef run_all_tests():\n    \"\"\"Run all verification tests\"\"\"\n    logger.info(\"Starting Models and Routing verification tests\")\n    \n    # Test 1: Health check\n    if not test_health():\n        logger.error(\"Health check failed - continuing with tests\")\n    \n    # Test 2: List models\n    models_count = test_models_list()\n    if models_count == 0:\n        logger.warning(\"No models found in registry - continuing with tests\")\n    \n    # Test 3: Register a model\n    test_model_id = test_model_registration()\n    if test_model_id is None:\n        logger.error(\"Model registration failed - continuing with tests\")\n    \n    # Test 4: Get model capabilities\n    if test_model_id and not test_model_capabilities(test_model_id):\n        logger.error(\"Model capabilities retrieval failed - continuing with tests\")\n    \n    # Test 5: Route a task\n    if not test_route_task():\n        logger.error(\"Task routing failed - continuing with tests\")\n    \n    # Test 6: Get model suggestions\n    if not test_model_suggestions():\n        logger.error(\"Model suggestions failed - continuing with tests\")\n    \n    logger.info(\"All models and routing verification tests completed!\")\n    return True\n\nif __name__ == \"__main__\":\n    success = run_all_tests()\n    sys.exit(0 if success else 1)\nEOF\n```\n\n## Step 4: Update the Deployment Script\n\nLet's update our deployment script to include the models and routing modules:\n\n```bash\n# Update deployment script - copy entire box\ncat > palios-taey-app/deploy.sh <<'EOF'\n#!/bin/bash\n# deploy.sh\n# Deploys the PALIOS-TAEY system to Google Cloud Platform\n\nset -e  # Exit on any error\n\n# Configuration\nPROJECT_ID=${PROJECT_ID:-\"palios-taey-dev\"}\nREGION=${REGION:-\"us-central1\"}\nSERVICE_NAME=${SERVICE_NAME:-\"palios-taey-service\"}\nIMAGE_NAME=\"palios-taey\"\nTAG=${TAG:-\"v1\"}\n\n# Display configuration\necho \"Deploying PALIOS-TAEY with configuration:\"\necho \"  Project ID:   $PROJECT_ID\"\necho \"  Region:       $REGION\"\necho \"  Service Name: $SERVICE_NAME\"\necho \"  Image:        $IMAGE_NAME:$TAG\"\necho \"\"\n\n# Ensure gcloud is set to the correct project\necho \"Setting gcloud project to $PROJECT_ID...\"\ngcloud config set project $PROJECT_ID\n\n# Build the container image\necho \"Building container image...\"\ngcloud builds submit --tag $REGION-docker.pkg.dev/$PROJECT_ID/palios-taey/$IMAGE_NAME:$TAG\n\n# Deploy to Cloud Run\necho \"Deploying to Cloud Run...\"\ngcloud run deploy $SERVICE_NAME \\\n  --image $REGION-docker.pkg.dev/$PROJECT_ID/palios-taey/$IMAGE_NAME:$TAG \\\n  --platform managed \\\n  --region $REGION \\\n  --allow-unauthenticated \\\n  --memory 512Mi \\\n  --cpu 1 \\\n  --set-env-vars=\"PROJECT_ID=$PROJECT_ID,ENVIRONMENT=dev,COLLECTION_PREFIX=memory_,MODELS_CONFIG_DIR=config/model_capabilities,MIN_CAPABILITY_SCORE=0.7\"\n\n# Get the service URL\nSERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format='value(status.url)')\necho \"\"\necho \"Deployment complete!\"\necho \"Service URL: $SERVICE_URL\"\necho \"\"\n\n# Verify the deployment\necho \"Verifying deployment...\"\ncurl -s $SERVICE_URL/health\n\necho \"\"\necho \"To run the verification tests against the deployed service:\"\necho \"export API_URL=$SERVICE_URL\"\necho \"export API_KEY=test_key\"\necho \"python verify_memory.py\"\necho \"python verify_models.py\"\nEOF\n```\n\n## Step 5: Create Required Model Configuration Directory\n\n```bash\n# Create model config directory\nmkdir -p palios-taey-app/config/model_capabilities\n\n# Create default model capabilities - copy entire box\ncat > palios-taey-app/config"
  ],
  "source": "claude",
  "timestamp": "2025-03-17T00:08:21.955727Z",
  "data_type": "message",
  "metadata": {
    "author": "assistant"
  }
}