{
  "data_id": "95e0cc3c-c6e3-4236-b2c0-6902bc37be82",
  "content": [
    "Let's try a different approach. In many cases, when the API returns only an ID token (and no access token), it means that for this API the proper authentication method is to obtain an ID token specifically. Instead of using the service account credentials' standard access token, you can use Google\u2019s\u202f`id_token.fetch_id_token()`\u202fmethod, which is designed for this purpose.\n\nBelow is a fully regenerated version of your **gemini_integration.py** that uses `id_token.fetch_id_token()` to obtain an ID token for a specified target audience. (Note: Please confirm with the Gemini Pro API documentation if it accepts an ID token for authentication.)\n\n---\n\n```python\nimport os\nimport requests\nimport logging\nfrom google.auth.transport.requests import Request\nfrom google.oauth2 import id_token\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n# Define the required scopes for the Gemini Pro API (if needed).\nSCOPES = [\n    \"https://www.googleapis.com/auth/cloud-platform\",\n    \"https://www.googleapis.com/auth/generative.language\"\n]\n\nclass GeminiProAPI:\n    def __init__(self):\n        # Load the path to your service account JSON key from the environment variable\n        service_account_file = os.environ.get(\"GEMINI_SERVICE_ACCOUNT_FILE\")\n        if not service_account_file:\n            raise ValueError(\"GEMINI_SERVICE_ACCOUNT_FILE environment variable not set.\")\n\n        # Set the target audience for the ID token; this is often the base URL of the API\n        target_audience = \"https://generativelanguage.googleapis.com\"\n        \n        # Fetch an ID token using the service account JSON key and the target audience.\n        # This will give you a token suitable for authenticating to the Gemini Pro API.\n        try:\n            self.access_token = id_token.fetch_id_token(Request(), target_audience, service_account_file=service_account_file)\n        except Exception as e:\n            raise ValueError(f\"Failed to obtain an ID token: {str(e)}\")\n        \n        if not self.access_token:\n            raise ValueError(\"Failed to obtain an ID token.\")\n\n        logging.info(\"Access Token obtained successfully.\")\n\n        # Set the Gemini Pro API endpoint\n        self.api_url = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\"\n        \n        # Define headers for your API request using the obtained ID token\n        self.headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def send_prompt(self, prompt_text, max_tokens=100):\n        \"\"\"\n        Send a prompt to the Gemini Pro API and return the JSON response.\n        \"\"\"\n        payload = {\n            \"prompt\": prompt_text,\n            \"max_tokens\": max_tokens\n        }\n        logging.info(f\"Sending prompt to Gemini Pro: {prompt_text}\")\n        response = requests.post(self.api_url, json=payload, headers=self.headers)\n        if response.status_code != 200:\n            logging.error(f\"Error from Gemini Pro: {response.status_code} - {response.text}\")\n            raise Exception(f\"Gemini Pro API error: {response.status_code}\")\n        logging.info(f\"Received response: {response.json()}\")\n        return response.json()\n```\n\n---\n\n### What This Code Does\n\n1. **Uses `id_token.fetch_id_token()`:**  \n   - It retrieves an ID token by specifying a target audience (`https://generativelanguage.googleapis.com`).  \n   - The method uses your service account key (pointed to by the `GEMINI_SERVICE_ACCOUNT_FILE` environment variable) to generate a token that should be acceptable by the Gemini Pro API.\n\n2. **Sets the Authorization Header:**  \n   - The token is used in the header as a Bearer token.\n\n3. **Remains Compatible with Your Existing Setup:**  \n   - The rest of your code (sending a prompt, error handling, logging) remains the same.\n\n### Next Steps\n\n1. **Replace your current gemini_integration.py file with the updated version above.**\n2. **Make sure your environment variable is set:**\n   ```cmd\n   set GEMINI_SERVICE_ACCOUNT_FILE=C:\\AI-Execution-System\\keys\\gemini-api-7a14f958617a.json\n   ```\n3. **Restart your server:**\n   ```cmd\n   python main.py\n   ```\n4. **Test the `/execute_gemini` endpoint using your curl command:**\n   ```cmd\n   curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"prompt\\\": \\\"Test Gemini integration\\\"}\" http://localhost:8080/execute_gemini\n   ```\n\nThis should now work (assuming the Gemini Pro API accepts the ID token for authentication). \n\nPlease try these steps and let me know if you receive a successful response or if any further issues arise."
  ],
  "source": "chatgpt",
  "timestamp": 1740593108.574094,
  "data_type": "message",
  "metadata": {
    "author": "assistant"
  }
}