{
  "data_id": "d3bf59b7-f161-42dc-8e33-5581b913cb62",
  "content": [
    "Below is an updated version of your **gemini_integration.py** that uses the correct method for obtaining an ID token from your service account file using `IDTokenCredentials`. This approach uses the proper class from the `google.oauth2` module and avoids the error you encountered.\n\nPlease replace your current file with the code below:\n\n```python\nimport os\nimport requests\nimport logging\nfrom google.oauth2 import id_token\nimport google.auth.transport.requests\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n# Set the target audience for the Gemini Pro API\nTARGET_AUDIENCE = \"https://generativelanguage.googleapis.com\"\n\nclass GeminiProAPI:\n    def __init__(self):\n        # Load the path to your service account JSON key from the environment variable\n        service_account_file = os.environ.get(\"GEMINI_SERVICE_ACCOUNT_FILE\")\n        if not service_account_file:\n            raise ValueError(\"GEMINI_SERVICE_ACCOUNT_FILE environment variable not set.\")\n\n        # Load IDTokenCredentials from the service account file with the specified target audience.\n        try:\n            credentials = id_token.IDTokenCredentials.from_service_account_file(\n                service_account_file, target_audience=TARGET_AUDIENCE\n            )\n        except Exception as e:\n            raise ValueError(f\"Failed to load IDTokenCredentials: {str(e)}\")\n        \n        # Refresh credentials to obtain an ID token\n        request_obj = google.auth.transport.requests.Request()\n        credentials.refresh(request_obj)\n        self.access_token = credentials.token\n        if not self.access_token:\n            raise ValueError(\"Failed to obtain an ID token.\")\n\n        logging.info(\"Access Token obtained successfully.\")\n\n        # Set the Gemini Pro API endpoint\n        self.api_url = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\"\n        \n        # Define headers for your API request using the obtained ID token\n        self.headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def send_prompt(self, prompt_text, max_tokens=100):\n        \"\"\"\n        Send a prompt to the Gemini Pro API and return the JSON response.\n        \"\"\"\n        payload = {\n            \"prompt\": prompt_text,\n            \"max_tokens\": max_tokens\n        }\n        logging.info(f\"Sending prompt to Gemini Pro: {prompt_text}\")\n        response = requests.post(self.api_url, json=payload, headers=self.headers)\n        if response.status_code != 200:\n            logging.error(f\"Error from Gemini Pro: {response.status_code} - {response.text}\")\n            raise Exception(f\"Gemini Pro API error: {response.status_code}\")\n        logging.info(f\"Received response: {response.json()}\")\n        return response.json()\n```\n\n### Explanation\n\n1. **IDTokenCredentials.from_service_account_file:**  \n   This method is used to load credentials that are specifically intended for obtaining an ID token. We provide the `target_audience` (the base URL for the API) to ensure the token is appropriate for authenticating with the Gemini Pro API.\n\n2. **Refreshing the Token:**  \n   After creating the credentials, we refresh them to obtain the token, which is then used in the `Authorization` header.\n\n3. **Error Handling:**  \n   The code raises errors if the environment variable isn\u2019t set or if obtaining the token fails.\n\n### Next Steps\n\n1. **Replace Your File:**  \n   Update your **gemini_integration.py** with the code above.\n2. **Set Your Environment Variable:**  \n   Ensure you have set `GEMINI_SERVICE_ACCOUNT_FILE` to the correct path (e.g.,  \n   `C:\\AI-Execution-System\\keys\\gemini-api-7a14f958617a.json`).\n3. **Restart Your Server:**  \n   Run:\n   ```cmd\n   python main.py\n   ```\n4. **Test the Endpoint:**  \n   Test the `/execute_gemini` endpoint again with your curl command:\n   ```cmd\n   curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"prompt\\\": \\\"Test Gemini integration\\\"}\" http://localhost:8080/execute_gemini\n   ```\n\nPlease try these steps and let me know if you now receive a valid response from the Gemini Pro API."
  ],
  "source": "chatgpt",
  "timestamp": 1740593218.723544,
  "data_type": "message",
  "metadata": {
    "author": "assistant"
  }
}