{"data_id": "67bf1053-9830-8000-99fd-ae619e1a1ed0-ed84cc7e-3513-4f5f-8297-7b7fdee95460", "content": ["I tried to update, but am getting an error on tabs. Can you regenerate full code:\n\nimport os\r\nfrom google.oauth2 import service_account\r\nimport google.auth.transport.requests\r\n\r\n\r\n\r\n# Define the required scopes for the Gemini Pro API.\r\nSCOPES = [\r\n    \"https://www.googleapis.com/auth/cloud-platform\",\r\n    \"https://www.googleapis.com/auth/generative.language\"  # Add this scope if required\r\n]\r\n\r\nclass GeminiProAPI:\r\n    def __init__(self):\r\n        # Load the path to your service account JSON key from the environment variable\r\n        service_account_file = os.environ.get(\"GEMINI_SERVICE_ACCOUNT_FILE\")\r\n        if not service_account_file:\r\n            raise ValueError(\"GEMINI_SERVICE_ACCOUNT_FILE environment variable not set.\")\r\n\r\n        # Load credentials from the service account file with the updated scopes\r\n        credentials = service_account.Credentials.from_service_account_file(\r\n            service_account_file, scopes=SCOPES\r\n        )\r\n\r\n        # Refresh credentials to obtain an access token\r\n        auth_req = google.auth.transport.requests.Request()\r\n        credentials.refresh(auth_req)\r\n        self.access_token = credentials.token\r\n        if not self.access_token:\r\n    \t\t# Fallback: use the id_token if available\r\n    \t\tif hasattr(credentials, 'id_token') and credentials.id_token:\r\n        \t\tself.access_token = credentials.id_token\r\n    \telse:\r\n        \traise ValueError(\"Failed to obtain an access token.\")\r\n\r\n        logging.info(\"Access Token obtained successfully.\")\r\n\r\n        # Set the Gemini Pro API endpoint\r\n        self.api_url = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\"\r\n        \r\n        # Define headers for your API request using the OAuth2 access token\r\n        self.headers = {\r\n            \"Authorization\": f\"Bearer {self.access_token}\",\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n\r\n    def send_prompt(self, prompt_text, max_tokens=100):\r\n        payload = {\r\n            \"prompt\": prompt_text,\r\n            \"max_tokens\": max_tokens\r\n        }\r\n        logging.info(f\"Sending prompt to Gemini Pro: {prompt_text}\")\r\n        response = requests.post(self.api_url, json=payload, headers=self.headers)\r\n        if response.status_code != 200:\r\n            logging.error(f\"Error from Gemini Pro: {response.status_code} - {response.text}\")\r\n            raise Exception(f\"Gemini Pro API error: {response.status_code}\")\r\n        logging.info(f\"Received response: {response.json()}\")\r\n        return response.json()\r"], "source": "ChatGPT", "timestamp": 1740592757.944644, "data_type": "conversation", "metadata": {"author": "user", "original_conversation_id": "67bf1053-9830-8000-99fd-ae619e1a1ed0"}}