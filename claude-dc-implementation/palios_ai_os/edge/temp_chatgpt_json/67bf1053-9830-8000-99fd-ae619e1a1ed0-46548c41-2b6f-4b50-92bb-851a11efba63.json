{"data_id": "67bf1053-9830-8000-99fd-ae619e1a1ed0-46548c41-2b6f-4b50-92bb-851a11efba63", "content": ["Below is the updated and fully formatted **gemini_integration.py** file with proper indentation and the fallback mechanism for obtaining the access token:\n\n```python\nimport os\nimport requests\nimport logging\nfrom google.oauth2 import service_account\nimport google.auth.transport.requests\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n# Define the required scopes for the Gemini Pro API.\nSCOPES = [\n    \"https://www.googleapis.com/auth/cloud-platform\",\n    \"https://www.googleapis.com/auth/generative.language\"  # Add this scope if required\n]\n\nclass GeminiProAPI:\n    def __init__(self):\n        # Load the path to your service account JSON key from the environment variable\n        service_account_file = os.environ.get(\"GEMINI_SERVICE_ACCOUNT_FILE\")\n        if not service_account_file:\n            raise ValueError(\"GEMINI_SERVICE_ACCOUNT_FILE environment variable not set.\")\n\n        # Load credentials from the service account file with the updated scopes\n        credentials = service_account.Credentials.from_service_account_file(\n            service_account_file, scopes=SCOPES\n        )\n\n        # Refresh credentials to obtain an access token\n        auth_req = google.auth.transport.requests.Request()\n        credentials.refresh(auth_req)\n        self.access_token = credentials.token\n        if not self.access_token:\n            # Fallback: use the id_token if available\n            if hasattr(credentials, 'id_token') and credentials.id_token:\n                self.access_token = credentials.id_token\n            else:\n                raise ValueError(\"Failed to obtain an access token.\")\n\n        logging.info(\"Access Token obtained successfully.\")\n\n        # Set the Gemini Pro API endpoint\n        self.api_url = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\"\n        \n        # Define headers for your API request using the OAuth2 access token\n        self.headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def send_prompt(self, prompt_text, max_tokens=100):\n        \"\"\"\n        Send a prompt to the Gemini Pro API and return the JSON response.\n        \"\"\"\n        payload = {\n            \"prompt\": prompt_text,\n            \"max_tokens\": max_tokens\n        }\n        logging.info(f\"Sending prompt to Gemini Pro: {prompt_text}\")\n        response = requests.post(self.api_url, json=payload, headers=self.headers)\n        if response.status_code != 200:\n            logging.error(f\"Error from Gemini Pro: {response.status_code} - {response.text}\")\n            raise Exception(f\"Gemini Pro API error: {response.status_code}\")\n        logging.info(f\"Received response: {response.json()}\")\n        return response.json()\n```\n\nMake sure that:\n\n- You set the environment variable `GEMINI_SERVICE_ACCOUNT_FILE` to point to your key file (e.g., `C:\\AI-Execution-System\\keys\\gemini-api-7a14f958617a.json`).\n- You have installed the required packages (`google-auth`, `google-auth-httplib2`, etc.) using pip.\n\nThis file should now work correctly with proper indentation. Let me know if you encounter any further issues or need additional help!"], "source": "ChatGPT", "timestamp": 1740592770.107382, "data_type": "conversation", "metadata": {"author": "assistant", "original_conversation_id": "67bf1053-9830-8000-99fd-ae619e1a1ed0"}}