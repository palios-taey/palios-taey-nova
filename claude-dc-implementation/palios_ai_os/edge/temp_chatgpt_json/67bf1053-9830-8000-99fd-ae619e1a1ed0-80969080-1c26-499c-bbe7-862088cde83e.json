{"data_id": "67bf1053-9830-8000-99fd-ae619e1a1ed0-80969080-1c26-499c-bbe7-862088cde83e", "content": ["The error indicates that the module `google.oauth2.id_token` doesn\u2019t have an attribute named `IDTokenCredentials`. In fact, the correct approach is to use the `IDTokenCredentials` class from the `google.oauth2.service_account` module instead. This isn\u2019t an issue with your service account key setup\u2014it\u2019s a matter of using the proper class reference.\n\nBelow is the updated code for **gemini_integration.py** using the correct reference:\n\n```python\nimport os\nimport requests\nimport logging\nfrom google.oauth2 import service_account\nimport google.auth.transport.requests\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n# Set the target audience for the Gemini Pro API\nTARGET_AUDIENCE = \"https://generativelanguage.googleapis.com\"\n\nclass GeminiProAPI:\n    def __init__(self):\n        # Load the path to your service account JSON key from the environment variable\n        service_account_file = os.environ.get(\"GEMINI_SERVICE_ACCOUNT_FILE\")\n        if not service_account_file:\n            raise ValueError(\"GEMINI_SERVICE_ACCOUNT_FILE environment variable not set.\")\n\n        # Load IDTokenCredentials from the service account file using the correct module reference.\n        try:\n            credentials = service_account.IDTokenCredentials.from_service_account_file(\n                service_account_file, target_audience=TARGET_AUDIENCE\n            )\n        except Exception as e:\n            raise ValueError(f\"Failed to load IDTokenCredentials: {str(e)}\")\n        \n        # Refresh credentials to obtain an ID token\n        request_obj = google.auth.transport.requests.Request()\n        credentials.refresh(request_obj)\n        self.access_token = credentials.token\n        if not self.access_token:\n            raise ValueError(\"Failed to obtain an ID token.\")\n\n        logging.info(\"Access Token obtained successfully.\")\n\n        # Set the Gemini Pro API endpoint\n        self.api_url = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\"\n        \n        # Define headers for your API request using the obtained ID token\n        self.headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def send_prompt(self, prompt_text, max_tokens=100):\n        \"\"\"\n        Send a prompt to the Gemini Pro API and return the JSON response.\n        \"\"\"\n        payload = {\n            \"prompt\": prompt_text,\n            \"max_tokens\": max_tokens\n        }\n        logging.info(f\"Sending prompt to Gemini Pro: {prompt_text}\")\n        response = requests.post(self.api_url, json=payload, headers=self.headers)\n        if response.status_code != 200:\n            logging.error(f\"Error from Gemini Pro: {response.status_code} - {response.text}\")\n            raise Exception(f\"Gemini Pro API error: {response.status_code}\")\n        logging.info(f\"Received response: {response.json()}\")\n        return response.json()\n```\n\n### Explanation\n\n- **Correct Module Reference:**  \n  We now use `service_account.IDTokenCredentials.from_service_account_file(...)` instead of referencing `google.oauth2.id_token.IDTokenCredentials`.\n\n- **Target Audience:**  \n  The `target_audience` is set to the base URL of the API, ensuring that the ID token is valid for authentication with the Gemini Pro API.\n\n- **Refresh and Use the Token:**  \n  After refreshing, the token is used in the `Authorization` header as `Bearer <token>`.\n\n### Next Steps\n\n1. **Replace your current gemini_integration.py** with the code above.\n2. **Set the environment variable** `GEMINI_SERVICE_ACCOUNT_FILE` to your service account JSON file path:\n   ```cmd\n   set GEMINI_SERVICE_ACCOUNT_FILE=C:\\AI-Execution-System\\keys\\gemini-api-7a14f958617a.json\n   ```\n3. **Restart your server** and test the `/execute_gemini` endpoint again:\n   ```cmd\n   curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"prompt\\\": \\\"Test Gemini integration\\\"}\" http://localhost:8080/execute_gemini\n   ```\n\nThis change should fix the attribute error. Let me know if you encounter any further issues or if the integration now works as expected!"], "source": "ChatGPT", "timestamp": 1740593407.222898, "data_type": "conversation", "metadata": {"author": "assistant", "original_conversation_id": "67bf1053-9830-8000-99fd-ae619e1a1ed0"}}